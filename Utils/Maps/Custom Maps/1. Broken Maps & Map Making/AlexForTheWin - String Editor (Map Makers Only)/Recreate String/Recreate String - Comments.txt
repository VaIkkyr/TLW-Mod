//This script is designed to take the input of the master client and convert it into a series of characters. It will output the length of the series in a string labeled "Length" and a series of characters stored in string variables labeled "Char(place number in string)." It does not support single quotations, double quotations, parentheses, commas, periods, or unicode symbols. To fix this, you can prompt the master client for these symbols and set the appropriate characters.

OnChatInput("input")
{
//Initializing all characters. The varaible name is the corrosponding ASCII value for the character. The characters that are unsupported by the scripting language (quotations, parentheses, commas, and periods) are the same as the previous character. In addition, any unicode characters such as the lenny face will not work.

VariableString.Set("33", "!");
VariableString.Set("34", """, """);
VariableString.Set("35", "#");
VariableString.Set("36", "$");
VariableString.Set("37", "%");
VariableString.Set("38", "&");
VariableString.Set("39", "'");
VariableString.Set("40", "(", ")");
VariableString.Set("41", ")", "(");
VariableString.Set("42", "*");
VariableString.Set("43", "+");
VariableString.Set("44", "+");
VariableString.Set("45", "-");
VariableString.Set("46", "-");
VariableString.Set("47", "/");
VariableString.Set("48", "0");
VariableString.Set("49", "1");
VariableString.Set("50", "2");
VariableString.Set("51", "3");
VariableString.Set("52", "4");
VariableString.Set("53", "5");
VariableString.Set("54", "6");
VariableString.Set("55", "7");
VariableString.Set("56", "8");
VariableString.Set("57", "9");
VariableString.Set("58", ":");
VariableString.Set("59", ";");
VariableString.Set("60", "<");
VariableString.Set("61", "=");
VariableString.Set("62", ">");
VariableString.Set("63", "?");
VariableString.Set("64", "@");
VariableString.Set("65", "A");
VariableString.Set("66", "B");
VariableString.Set("67", "C");
VariableString.Set("68", "D");
VariableString.Set("69", "E");
VariableString.Set("70", "F");
VariableString.Set("71", "G");
VariableString.Set("72", "H");
VariableString.Set("73", "I");
VariableString.Set("74", "J");
VariableString.Set("75", "K");
VariableString.Set("76", "L");
VariableString.Set("77", "M");
VariableString.Set("78", "N");
VariableString.Set("79", "O");
VariableString.Set("80", "P");
VariableString.Set("81", "Q");
VariableString.Set("82", "R");
VariableString.Set("83", "S");
VariableString.Set("84", "T");
VariableString.Set("85", "U");
VariableString.Set("86", "V");
VariableString.Set("87", "W");
VariableString.Set("88", "X");
VariableString.Set("89", "Y");
VariableString.Set("90", "Z");
VariableString.Set("91", "[");
VariableString.Set("92", "\");
VariableString.Set("93", "]");
VariableString.Set("94", "^");
VariableString.Set("95", "_");
VariableString.Set("96", "`");
VariableString.Set("97", "a");
VariableString.Set("98", "b");
VariableString.Set("99", "c");
VariableString.Set("100", "d");
VariableString.Set("101", "e");
VariableString.Set("102", "f");
VariableString.Set("103", "g");
VariableString.Set("104", "h");
VariableString.Set("105", "i");
VariableString.Set("106", "j");
VariableString.Set("107", "k");
VariableString.Set("108", "l");
VariableString.Set("109", "m");
VariableString.Set("110", "n");
VariableString.Set("111", "o");
VariableString.Set("112", "p");
VariableString.Set("113", "q");
VariableString.Set("114", "r");
VariableString.Set("115", "s");
VariableString.Set("116", "t");
VariableString.Set("117", "u");
VariableString.Set("118", "v");
VariableString.Set("119", "w");
VariableString.Set("120", "x");
VariableString.Set("121", "y");
VariableString.Set("122", "z");
VariableString.Set("123", "{");
VariableString.Set("124", "|");
VariableString.Set("125", "}");
VariableString.Set("126", "~");

//The created string so far
VariableString.Set("Word", "");

//Test which characters are in the input string. It is set to /restart at first to populate it with something other than a blank string and not skip the second while loop, but it is not a string that could ever occur
VariableString.Set("GuessWord", "/restart");

//Keep track of the length of the string and name individual character variables
VariableInt.Set("Length", 0);

//Iterate through the possible characters (starts one less than first character)
VariableInt.Set("CurrentChar", 32);

//Temporarily holds the converted character to append
VariableString.Set("TempChar", "");

//Temporarily holds the name of the character string
VariableString.Set("TempName", "");

//Iterate through the characters and checks if it is in the original string. If it is, than make a new character, increase length, add the character to "word," and repeat
While(String.NotEquals(VariableString("input"), VariableString("Word")))
{
While(String.NotStartsWith(VariableString("input"), VariableString("GuessWord")))
{
VariableString.Set("GuessWord", VariableString("Word"));
VariableInt.Add("CurrentChar", 1);
VariableString.Set("TempChar", VariableInt("CurrentChar").ConvertToString());
VariableString.Append("GuessWord", VariableString(VariableString("TempChar")));
}

//Reset the iterating variable
VariableInt.Set("CurrentChar", 32);

//Update the word variable, reset the guessword variable, add one to the length variable, and create a string with the new character in it
VariableString.Set("Word", VariableString("GuessWord"));
VariableString.Set("GuessWord", "/restart");
VariableInt.Add("Length", 1);

VariableString.Set("TempName", "Char");
VariableString.Append("TempName", VariableInt("Length").ConvertToString());
VariableString.Set(VariableString("TempName") , VariableString(VariableString("TempChar")));
}

//Print word, length, and indivisual characters
Game.PrintMessage(VariableString("Word"));
Game.PrintMessage(VariableInt("Length").ConvertToString());

VariableInt.Set("count", 1);
VariableInt.Add("Length", 1);
While(Int.LessThan(VariableInt("count"), VariableInt("Length")))
{
VariableString.Set("TempName", "Char");
VariableString.Append("TempName", VariableInt("count").ConvertToString());
Game.PrintMessage(VariableString(VariableString("TempName")));
VariableInt.Add("count", 1);
}
VariableInt.Subtract("Length", 1);
}